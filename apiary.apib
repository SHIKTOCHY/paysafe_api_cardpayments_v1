FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# PAYSAFE Card Payments API 

Connect your application directly with our payment engine to process a full suite of methods that are REST-based – designed to be easy to understand and use. Ultimate control puts you in the driver’s seat.
* Choose an efficient, lightweight, and fast integration method to access our API.
* Implement a wide variety of REST-based API requests - including purchases, refunds, and authorization reversals.
* Obtain output in JSON format – it’s easy to parse in a large variety of Web and mobile applications.
* Use any language or platform to make requests through standard HTTP protocols.

## Authentication 
In order for you to use the NETBANX REST API, NETBANX must first set you up on their system
and provide you with an API key. Your API key looks something like this:
 * Key ID – MerchantXYZ
 * Key Password – B-tst1-0-51ed39e4-312d02345d3f123120881dff9bb4020a89e8ac44cdfdcecd702151182fdc952272661d290ab2e5849e31bb03deede7e
>
The case-sensitive API key is sent using HTTP Basic Authentication. To use HTTP Basic Authentication, you must send the API key credentials using the Authorization header with every request. The Authorization header is constructed as follows:
 1. The Key ID and Key Password are combined into a string separated by a colon, e.g.,“Key ID:Key Password”.
 2. The resulting string literal is then encoded using Base64.
 3. The authorization method and a space (i.e., “Basic”) are then put before the encoded string.
>
For example, using the Key ID and Password examples above, the header is formed as follows:
>
Authorization: Basic
bWVyY2hhbnQteHl6OkItdHN0MS0wLTUxZWQzOWU0LTMxMmQwMjM0NWQzZjEyMzEyMDg4MWRmZjliYjQwMjBhODll OGFjNDRjZGZkY2VjZDcwMjE1MTE4MmZkYzk1MjI3MjY2MWQyOTBhYjJlNTg0OWUzMWJiMDNkZWVkZTdl
>

>For additional details, please refer to http://en.wikipedia.org/wiki/Basic_access_authentication.
>

>>
>>Your Production API key will be different from your Test API key. Contact your account manager for details. You must keep your API keys safe and ensure that it is used appropriately for your needs.
>>



## URLs 

###Test URL
In order to test your integration with NETBANX, use the following Test URL:
https://api.test.netbanx.com 
>For example:
>https://api.test.netbanx.com/cardpayments/v1/accounts/{ACCOUNT_ID}

###Production URL
In order to process live requests with NETBANX, use the following Production URL:
https://api.netbanx.com
>For example:
>https://api.netbanx.com/cardpayments/v1/accounts/{ACCOUNT_ID}




## Pagination

In the case where an API GET request returns multiple results, NETBANX returns the first 10 records by default and uses HATEOAS links to provide page navigation. In addition to the default behavior, it is also possible to control the number of results and starting point by passing in query parameters as follows:

### Query Parameters for Pagination


| Name      | Description                                                                           |
|-----------|---------------------------------------------------------------------------------------|
| limit     | This is the total number of records to  return. Default value is 10. Max value is 50. |
| offset    | This is the starting position, where 0 is the first record. Default value is 0.       |
| startDate | This is the start date in UTC. Default value is 30 days before the endDate.           |
| endDate   | This is the end date in UTC. Default value is the current date and time.              |


## Global Invalid Characters

You must not include any of the characters in the following table as values in any of your request parameters. If you do, your request will result in an error.

|    Character    |    HEX    |    Description                     |
|-----------------|-----------|------------------------------------|
| "               | 22        | Double quotes (or speech marks)    |
| ;               | 3B        | Semicolon                          |
| ^               | 5E        | Caret, circumflex                  |
| *               | 2A        | Asterisk                           |
| <               | 3C        | Less than (or open angled bracket) |
| /               | 2F        | Slash or divide                    |
| [               | 5B        | Opening bracket                    |
| ]               | 5D        | Closing bracket                    |
| \               | 5C        | Backslash                          |



## Getting Started


###Overview
This section outlines some common scenarios for making payments. To get started you must first sign up for a test account and get an API key.
All examples in this section use cURL, which is a command line tool for transferring data using protocols such as HTTPS.
 
###Contents
* Verify That the Service Is Accessible
* Process a Purchase
* Process an Authorization Followed by a Settlement
* Cancel a Pending Settlement
* Look Up an Authorization Transaction
* Validate a Credit Card
 
Next: Verify That the Service Is Accessible


### Verify That the Service Is Accessible

The following request verifies that the service is up and accessible from your network.

Request:

<pre><code>
curl -X GET https://api.test.netbanx.com/cardpayments/monitor
</code></pre>

Response:

<pre><code>

{
  "status" : "READY"
}

</code></pre>

**Note:** The system should respond with a status of READY if it is available.


### Process a Purchase

The request verifies that the customer's account is valid and that sufficient funds are available to cover the transaction's cost. The funds are "held" and deducted from the customer's credit limit (or bank balance, in the case of a debit card) but are not yet transferred to the merchant. At the end of the day, NETBANX submits the PENDING settlements to the acquirer in a "batch transfer," which begins the settlement process.
The funds are transferred from the customer's accounts to the merchant's accounts and the transaction may not appear on the customer's statement or online account activity for one to two days, and it can take up to three business days for funds to be deposited in the merchant's account.
 
To process a purchase, you must initiate a POST request to the auths endpoint. By default, an amount is authorized on the card and a subsequent settlement request would be required to actually charge the customer. So by setting the flag settleWithAuth to true, the card processing system will automatically charge the card as part of the same request. If you are shipping physical items, you should not perform the settlement until the items are actually shipped.











## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }
